.define public AD0_PIN 6
.define public IRQ_PIN 21
.define public IOW_PIN 4
.define public IOR_PIN 5
.define public IOCHRDY_PIN 26
.define public ADS_PIN 27
.define public UART_TX_PIN 28
.define public DACK_PIN 19

; 10 instructions
.program isa
.side_set 2 opt                   ; sideset bit 1 is ADS, bit 0 is IOCHRDY
restart:
.wrap_target
    wait 1 gpio IOW_PIN           ; IOW rising edge (or already high when PIO starts)
    wait 0 gpio IOW_PIN           ; IOW falling edge, no sideset to not conflict with other SMs
    jmp pin restart               ; if this is not during DMA (DACK deasserted), go ahead and read address
read_addr:
    in pins, 10         side 0b10 ; Read address and flip mux simultaneously.. yolo
    nop [3]             side 0b10 ; Wait more for mux to switch; max 3 because of optional sideset
    in pins, 8          side 0b00 ; Read data
    nop [3]             side 0b00 ; bring IOCHRDY back. TODO see if we can move the sideset back to restart
.wrap



% c-sdk {
static inline void isa_program_init(PIO pio, uint sm, uint offset) {
    pio_sm_config c = isa_program_get_default_config(offset);

    // Set up AD0 pins as input
    sm_config_set_in_pins(&c, AD0_PIN);

	// TEST
    //sm_config_set_set_pins(&c, ADS_PIN);

    // Autopush at 18 bits (10 addr + 8 data)
    sm_config_set_in_shift(&c, false, true, 18);

    // Set the pin direction for IOW and AD0 bus as input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, IOW_PIN, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, AD0_PIN, 10, false);

    // set up IOCHRDY and ADS
    sm_config_set_sideset_pins(&c, IOCHRDY_PIN);
    pio_gpio_init(pio, IOCHRDY_PIN);
    pio_gpio_init(pio, ADS_PIN);
    pio_sm_set_consecutive_pindirs(pio, sm, IOCHRDY_PIN, 2, true);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << IOCHRDY_PIN);
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << ADS_PIN);

    // JMP on DACK so we can ignore iow during DMA write
    sm_config_set_jmp_pin(&c, DACK_PIN);

	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);

    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}
%}
